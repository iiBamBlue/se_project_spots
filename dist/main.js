!function(){"use strict";var e="/se_project_spots/";const t={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__submit-button",inactiveButtonClass:"modal__submit-button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error"},r=e=>{console.error(`Validation Error: ${e}`)},o=(e,t,o)=>{const n=e.querySelector(`#${t.id}-error`);n?(n.textContent="",n.removeAttribute("role"),t.classList.remove(o.inputErrorClass)):r(`Error message element for input ${t.id} not found.`)},n=(e,t,r)=>{(e=>e.some((e=>!e.validity.valid)))(e)?a(t,r):(t.disabled=!1,t.classList.remove(r.inactiveButtonClass))},a=(e,t)=>{e.disabled=!0,e.classList.add(t.inactiveButtonClass)},s=(e,t,r)=>{t.forEach((t=>{o(e,t,r)}));const n=e.querySelector(r.submitButtonSelector);a(n,r)};function i(e,t,r="Save",o="Saving..."){t.textContent=e?o:r}function l(e){let t="Something went wrong. Please try again.";if("string"==typeof e&&e.includes("Error: ")){const r=e.match(/Error: (\d+)/)?.[1];switch(r){case"400":t="Invalid request. Please check your input.";break;case"401":t="Authentication failed. Please refresh and try again.";break;case"403":t="You do not have permission to perform this action.";break;case"404":t="The requested resource was not found.";break;case"500":t="Server error. Please try again later.";break;default:t=`Request failed (${r}). Please try again.`}}else e instanceof TypeError&&(t="Network error. Please check your connection.");return console.error("API Error:",e),function(e,t=5e3){const r=document.createElement("div");r.className="error-notification",r.textContent=e,r.setAttribute("role","alert"),r.setAttribute("aria-live","polite"),document.body.appendChild(r),setTimeout((()=>{r.parentNode&&r.parentNode.removeChild(r)}),t)}(t),t}const c={apiBaseUrl:process.env.API_BASE_URL||"https://around-api.en.tripleten-services.com/v1",apiToken:process.env.API_TOKEN||"f1f1dbab-8e17-48d3-a098-d77dfd6ea3c5"};var d=e+"5e2464bff616faf70484.svg",u=e+"2fc47fd8e9a9bcd9612f.jpg",m=e+"49e44e5e03758262e8bf.svg",_=e+"975792ea68af0a3c209d.svg",f=e+"c81b22e9874268723f8d.svg";const v=document.querySelector(".header__logo"),h=document.querySelector(".profile__avatar"),y=document.querySelector(".profile__edit-button img"),p=document.querySelector(".profile__add-button img"),S=document.querySelector(".profile__pencilIcon");v&&(v.src=d),h&&(h.src=u),y&&(y.src=m),p&&(p.src=_),S&&(S.src=f);const k=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}_request(e,t={}){const r={headers:this._headers,...t},o=`${this._baseUrl}${e}`;return fetch(o,r).then(this._checkResponse)}getUserInfo(){return this._request("/users/me")}getInitialCards(){return this._request("/cards",{method:"GET"})}editUserInfo({name:e,about:t}){return this._request("/users/me",{method:"PATCH",body:JSON.stringify({name:e,about:t})})}updateAvatar({avatar:e}){return this._request("/users/me/avatar",{method:"PATCH",body:JSON.stringify({avatar:e})})}addCard({name:e,link:t}){return this._request("/cards",{method:"POST",body:JSON.stringify({name:e,link:t})})}removeCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}likeCard(e){return this._request(`/cards/${e}/likes`,{method:"PUT"})}dislikeCard(e){return this._request(`/cards/${e}/likes`,{method:"DELETE"})}fetchInitialData(){return Promise.all([this.getUserInfo(),this.getInitialCards()])}}({baseUrl:c.apiBaseUrl,headers:{authorization:c.apiToken,"Content-Type":"application/json"}});let b;k.getUserInfo().then((e=>(b=e._id,g&&(g.textContent=e.name),C&&(C.textContent=e.about),D&&(D.src=e.avatar),k.getInitialCards()))).then((e=>{M&&Array.isArray(e)?e.forEach((e=>{const t=V(e);t&&M.append(t)})):console.error("Cards list element not found or cards data is invalid")})).catch(l);const q=document.querySelector(".profile__edit-button"),E=document.querySelector(".profile__add-button"),g=document.querySelector(".profile__name"),C=document.querySelector(".profile__description"),L=document.querySelectorAll(".modal__close-button"),w=document.querySelector("#delete-modal"),x=w?.querySelector("#delete-form"),A=w?.querySelector(".modal__cancel-button"),P=document.querySelector(".profile__avatar-button"),T=document.querySelector("#new-avatar-modal"),I=T?.querySelector(".modal__form"),U=T?.querySelector("#new-avatar-link-input"),D=document.querySelector(".profile__avatar"),$=document.querySelector("#edit-modal"),B=$?.querySelector(".modal__form"),N=$?.querySelector("#profile-name-input"),O=$?.querySelector("#profile-description-input"),j=document.querySelector("#new-card-modal"),K=j?.querySelector(".modal__form"),R=j?.querySelector("#new-card-link-input"),J=j?.querySelector("#new-card-caption-input"),H=document.querySelector("#preview-modal"),z=H?.querySelector(".modal__image"),F=H?.querySelector(".modal__caption"),G=document.querySelector("#card-template"),M=document.querySelector(".cards__list");function V(e){if(!G)return console.error("Card template not found"),null;const t=G.content.querySelector(".card").cloneNode(!0);t._id=e._id;const r=t.querySelector(".card__title"),o=t.querySelector(".card__image"),n=t.querySelector(".card__like-button"),a=t.querySelector(".card__like-count"),s=t.querySelector(".card__delete-button");r&&(r.textContent=e.name),o&&(o.src=e.link,o.alt=e.name,o.onerror=function(){console.error("Failed to load image:",e.link),this.src="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='100' height='100'%3E%3Crect width='100' height='100' fill='%23f0f0f0'/%3E%3Ctext x='50' y='50' text-anchor='middle' dy='.3em'%3EImage not found%3C/text%3E%3C/svg%3E"});const i=e.likes?e.likes.length:0,c=e.likes&&e.likes.some((e=>e._id===b));return a&&(a.textContent=i.toString()),n&&c&&n.classList.add("card__like-button_liked"),n.addEventListener("click",(()=>{(n.classList.contains("card__like-button_liked")?k.dislikeCard(e._id):k.likeCard(e._id)).then((e=>{const t=e.likes&&e.likes.some((e=>e._id===b)),r=e.likes?e.likes.length:0;n.classList.toggle("card__like-button_liked",t),a.textContent=r.toString()})).catch((e=>{l(e)}))})),s.addEventListener("click",(()=>{Y(w),x._cardToDelete=t})),o.addEventListener("click",(()=>{Y(H),F.textContent=e.name,z.alt=e.name,z.src=e.link})),t}function Y(e){function t(t){t.target.classList.contains("modal_opened")&&Q(e)}function r(t){"Escape"===t.key&&Q(e)}e.classList.add("modal_opened"),e._handleOverlayClick&&document.removeEventListener("click",e._handleOverlayClick),e._handleEscapeKeyPress&&document.removeEventListener("keydown",e._handleEscapeKeyPress),e._handleOverlayClick=t,e._handleEscapeKeyPress=r,document.addEventListener("click",t),document.addEventListener("keydown",r)}function Q(e){e.classList.remove("modal_opened"),document.removeEventListener("click",e._handleOverlayClick),document.removeEventListener("keydown",e._handleEscapeKeyPress)}function W(){const e=N.value,t=O.value;return k.editUserInfo({name:e,about:t}).then((e=>{g.textContent=e.name,C.textContent=e.about,Q($)}))}L.forEach((e=>{const t=e.closest(".modal");e.addEventListener("click",(()=>Q(t)))})),q.addEventListener("click",(()=>{N.value=g.textContent,O.value=C.textContent,s(B,[N,O],t),Y($)})),P.addEventListener("click",(()=>{Y(T)})),E.addEventListener("click",(()=>{Y(j)})),A.addEventListener("click",(()=>{Q(w)})),B.addEventListener("submit",(function(e){!function(e,t,r="Saving..."){t.preventDefault();const o=t.submitter,n=o.textContent;i(!0,o,n,r),e().catch(console.error).finally((()=>{i(!1,o,n)}))}(W,e,"Saving...")})),K.addEventListener("submit",(function(e){e.preventDefault();const t=K.querySelector(".modal__submit-button");i(!0,t),k.addCard({name:J.value,link:R.value}).then((t=>{const r=V(t);M.prepend(r),e.target.reset(),Q(j)})).catch(l).finally((()=>{i(!1,t)}))})),x.addEventListener("submit",(e=>{e.preventDefault();const t=x.querySelector(".modal__submit-button");i(!0,t,"Delete","Deleting..."),k.removeCard(x._cardToDelete._id).then((()=>{x._cardToDelete.remove(),Q(w)})).catch(l).finally((()=>{i(!1,t,"Delete")}))})),I.addEventListener("submit",(e=>{e.preventDefault();const t=I.querySelector(".modal__submit-button");i(!0,t),k.updateAvatar({avatar:U.value}).then((t=>{D&&(D.src=t.avatar),e.target.reset(),Q(T)})).catch(l).finally((()=>{i(!1,t)}))})),(e=>{document.querySelectorAll(e.formSelector).forEach((t=>{const a=Array.from(t.querySelectorAll(e.inputSelector));((e,t)=>{const a=Array.from(e.querySelectorAll(t.inputSelector)),s=e.querySelector(t.submitButtonSelector);n(a,s,t),a.forEach((i=>{i.addEventListener("input",(()=>{((e,t,n)=>{t.validity.valid?o(e,t,n):((e,t,o,n)=>{const a=e.querySelector(`#${t.id}-error`);a?(a.textContent=o,a.setAttribute("role","alert"),t.classList.add(n.inputErrorClass)):r(`Error message element for input ${t.id} not found.`)})(e,t,t.validationMessage,n)})(e,i,t),n(a,s,t)}))}))})(t,e),t.addEventListener("reset",(()=>{s(t,a,e)}))}))})(t)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,