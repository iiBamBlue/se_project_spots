!function(){"use strict";var e="/se_project_spots/";const t={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__submit-button",inactiveButtonClass:"modal__submit-button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error"},r=e=>{console.error(`Validation Error: ${e}`)},o=(e,t,o)=>{const n=e.querySelector(`#${t.id}-error`);n?(n.textContent="",n.removeAttribute("role"),t.classList.remove(o.inputErrorClass)):r(`Error message element for input ${t.id} not found.`)},n=(e,t,r)=>{(e=>e.some((e=>!e.validity.valid)))(e)?a(t,r):(t.disabled=!1,t.classList.remove(r.inactiveButtonClass))},a=(e,t)=>{e.disabled=!0,e.classList.add(t.inactiveButtonClass)},l=(e,t,r)=>{t.forEach((t=>{o(e,t,r)}));const n=e.querySelector(r.submitButtonSelector);a(n,r)};function c(e,t){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"Save",o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"Saving...";t.textContent=e?o:r}function s(e,t){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"Saving...";t.preventDefault();const o=t.submitter,n=o.textContent;return c(!0,o,n,r),e().catch(console.error).finally((()=>{c(!1,o,n)}))}var i=e+"5e2464bff616faf70484.svg",d=e+"2fc47fd8e9a9bcd9612f.jpg",u=e+"49e44e5e03758262e8bf.svg",m=e+"975792ea68af0a3c209d.svg",_=e+"c81b22e9874268723f8d.svg";document.querySelector(".header__logo").src=i,document.querySelector(".profile__avatar").src=d,document.querySelector(".profile__edit-button img").src=u,document.querySelector(".profile__add-button img").src=m,document.querySelector(".profile__pencilIcon").src=_;const v=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}_request(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const r={headers:this._headers,...t},o=`${this._baseUrl}${e}`;return fetch(o,r).then(this._checkResponse)}getUserInfo(){return this._request("/users/me")}getInitialCards(){return this._request("/cards",{method:"GET"})}editUserInfo(e){let{name:t,about:r}=e;return this._request("/users/me",{method:"PATCH",body:JSON.stringify({name:t,about:r})})}updateAvatar(e){let{avatar:t}=e;return this._request("/users/me/avatar",{method:"PATCH",body:JSON.stringify({avatar:t})})}addCard(e){let{name:t,link:r}=e;return this._request("/cards",{method:"POST",body:JSON.stringify({name:t,link:r})})}removeCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}likeCard(e){return this._request(`/cards/${e}/likes`,{method:"PUT"})}dislikeCard(e){return this._request(`/cards/${e}/likes`,{method:"DELETE"})}fetchInitialData(){return Promise.all([this.getUserInfo(),this.getInitialCards()])}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"f1f1dbab-8e17-48d3-a098-d77dfd6ea3c5","Content-Type":"application/json"}});let f;v.getUserInfo().then((e=>(f=e._id,p.textContent=e.name,S.textContent=e.about,D.src=e.avatar,v.getInitialCards()))).then((e=>{e.forEach((e=>{const t=H(e);R.append(t)}))})).catch(console.error);const y=document.querySelector(".profile__edit-button"),h=document.querySelector(".profile__add-button"),p=document.querySelector(".profile__name"),S=document.querySelector(".profile__description"),q=document.querySelectorAll(".modal__close-button"),b=document.querySelector("#delete-modal"),k=b.querySelector("#delete-form"),E=b.querySelector(".modal__cancel-button"),C=document.querySelector(".profile__avatar-button"),g=document.querySelector("#new-avatar-modal"),L=g.querySelector(".modal__form"),x=g.querySelector("#new-avatar-link-input"),D=document.querySelector(".profile__avatar"),A=document.querySelector("#edit-modal"),$=A.querySelector(".modal__form"),T=A.querySelector("#profile-name-input"),U=A.querySelector("#profile-description-input"),I=document.querySelector("#new-card-modal"),w=I.querySelector(".modal__form"),P=I.querySelector("#new-card-link-input"),B=I.querySelector("#new-card-caption-input"),O=document.querySelector("#preview-modal"),j=O.querySelector(".modal__image"),N=O.querySelector(".modal__caption"),J=document.querySelector("#card-template"),R=document.querySelector(".cards__list");function H(e){const t=J.content.querySelector(".card").cloneNode(!0);t._id=e._id;const r=t.querySelector(".card__title"),o=t.querySelector(".card__image"),n=t.querySelector(".card__like-button"),a=t.querySelector(".card__like-count"),l=t.querySelector(".card__delete-button");return r.textContent=e.name,o.src=e.link,o.alt=e.name,e.isLiked?(n.classList.add("card__like-button_liked"),a.textContent="1"):a.textContent="0",n.addEventListener("click",(()=>{(n.classList.contains("card__like-button_liked")?v.dislikeCard(e._id):v.likeCard(e._id)).then((e=>{n.classList.toggle("card__like-button_liked",e.isLiked),a.textContent=e.isLiked?"1":"0"})).catch((e=>{console.error("Error updating like status:",e)}))})),l.addEventListener("click",(()=>{K(b),k._cardToDelete=t})),o.addEventListener("click",(()=>{K(O),N.textContent=e.name,j.alt=e.name,j.src=e.link})),t}function K(e){function t(t){t.target.classList.contains("modal_opened")&&z(e)}function r(t){"Escape"===t.key&&z(e)}e.classList.add("modal_opened"),document.addEventListener("click",t),document.addEventListener("keydown",r),e._handleOverlayClick=t,e._handleEscapeKeyPress=r}function z(e){e.classList.remove("modal_opened"),document.removeEventListener("click",e._handleOverlayClick),document.removeEventListener("keydown",e._handleEscapeKeyPress)}function G(){const e=T.value,t=U.value;return v.editUserInfo({name:e,about:t}).then((e=>{p.textContent=e.name,S.textContent=e.about,z(A)}))}var M;q.forEach((e=>{const t=e.closest(".modal");e.addEventListener("click",(()=>z(t)))})),y.addEventListener("click",(()=>{T.value=p.textContent,U.value=S.textContent,l($,[T,U],t),K(A)})),C.addEventListener("click",(()=>{K(g)})),h.addEventListener("click",(()=>{K(I)})),E.addEventListener("click",(()=>{z(b)})),$.addEventListener("submit",(function(e){s(G,e,"Saving...")})),w.addEventListener("submit",(function(e){e.preventDefault();const t=w.querySelector(".modal__submit-button");c(!0,t),v.addCard({name:B.value,link:P.value}).then((t=>{const r=H(t);R.prepend(r),e.target.reset(),z(I)})).catch(console.error).finally((()=>{c(!1,t)}))})),k.addEventListener("submit",(e=>{e.preventDefault();const t=k.querySelector(".modal__submit-button");c(!0,t,"Delete","Deleting..."),v.removeCard(k._cardToDelete._id).then((()=>{s((()=>{k._cardToDelete.remove()})),z(b)})).catch(console.error).finally((()=>{c(!1,t,"Delete")}))})),L.addEventListener("submit",(e=>{e.preventDefault();const t=L.querySelector(".modal__submit-button");c(!0,t),v.updateAvatar({avatar:x.value}).then((t=>{D.src=t.avatar,e.target.reset(),z(g)})).catch(console.error).finally((()=>{c(!1,t)}))})),M=t,document.querySelectorAll(M.formSelector).forEach((e=>{const t=Array.from(e.querySelectorAll(M.inputSelector));((e,t)=>{const a=Array.from(e.querySelectorAll(t.inputSelector)),l=e.querySelector(t.submitButtonSelector);n(a,l,t),a.forEach((c=>{c.addEventListener("input",(()=>{((e,t,n)=>{t.validity.valid?o(e,t,n):((e,t,o,n)=>{const a=e.querySelector(`#${t.id}-error`);a?(a.textContent=o,a.setAttribute("role","alert"),t.classList.add(n.inputErrorClass)):r(`Error message element for input ${t.id} not found.`)})(e,t,t.validationMessage,n)})(e,c,t),n(a,l,t)}))}))})(e,M),e.addEventListener("reset",(()=>{l(e,t,M)}))}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,